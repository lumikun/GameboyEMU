#+TITLE: Notes on Gameboy emulation
#+AUTHOR: Maris Muiznieks
#+EMAIL: maris.muiznieks@lumi.moe
#+OPTIONS: toc:nil
#+TOC: headline 3

* Table of Contents :TOC:
- [[#emulation][Emulation..]]
  - [[#what-is-emulation][What is Emulation?]]
  - [[#video-game-emulation][Video game emulation?]]
  - [[#hardware-emulation][Hardware emulation?]]
  - [[#more-info][More info.]]
- [[#structure-and-organization-of-emulators][Structure and organization of Emulators.]]
  - [[#memory-subsystem][Memory subsystem]]
  - [[#cpu-simulator][CPU Simulator]]
  - [[#io][I/O]]
- [[#applications][Applications]]
  - [[#in-preservation][In preservation]]
  - [[#in-new-media-art][In new media Art]]
  - [[#in-future-systems-design][In future systems design]]
- [[#comparison-with-simulation][Comparison with simulation]]
- [[#comparison-with-hardware-virtualization][Comparison with hardware virtualization]]
- [[#gameboy-emulation][Gameboy Emulation]]
  - [[#specifications-of-dmg-gameboy][Specifications of DMG Gameboy]]
  - [[#hardware-access][Hardware access]]
  - [[#graphics][Graphics]]
  - [[#audio][AUDIO]]
  - [[#games][Games]]
  - [[#anti-piracy][Anti-piracy]]
- [[#thoughts-on-the-whole-work-diary][Thoughts on the whole work Diary.]]
  - [[#little-issues][Little issues.]]
  - [[#practicum-thoughts][Practicum thoughts.]]

* Emulation..
** What is Emulation?
In computing, an *emulator* is hardware or software that enables one computer system to behave like another computer system. An emulator typically enables the host system to run software or use peripheral devices designed for the guest system. Emulation refers to the abillity of a computer program in an electronic device to emulate another program or device.
Many printers, for example are designed to emulate HP LaserJet printers because so much software is weritten for HP printers. If a non-HP printer emulates an HP printer, any software written for a real HP printer will also run in the non-HP printer emulation and produce equivalent printing.
** Video game emulation?
Since at least the 1990's, many video game enthusiasts and hobbyists have used emulators to play classic arcade games from the 1980's using the games original 1980's machine code and data, which is interpreted by a current-era system, and to emulate old video game consoles. Notable systems are NES, SNES, Sega Genessis and Gameboy systems that are often emulated, and used to play various classic Video games such as (Super Mario, Sonic, Zelda, Castlevania, etc.).
** Hardware emulation?
A hardware emulator is an emulator which takes the form of a hardware device. Examples include the *DOS-compatible* card installed in some 1990's-era Macintosh computers, such as the Centris 610 or Performa 630, that allowed them to run PC software programs and *FPGA-bassed* hardware emulators. The Church-Turing thesis implies that (theoretically) any operating envidonment can be emulated within any other environment (assuming memory limitations are ignored.) However, in practice, it can e quite difficult, particularly when the exact behavior of the system to be emulated is not documented and has to be deduced through reverse engineering. It also says nothing about timing constraints; if the emulator does not perform as quickly as it did using the original hardware, the software inside the emulation may run much more slowly.
** More info.
Most emulators just emulate a hardware architecture - if operating system firmware or software is required for the desired software, it must be provided was well (and may itself be emulated). Both the OS and the software will then be interpreted by the emulator, rather than being run by native hardware. Apart from the interpreter for the emulated binary machine's language, some other hardware (such as input or output devices)
must be provided in virtual from as well; for example, if writing to a specific memory location should influence what is displayed on the screen, then this would need to be emulated. While emulation could, if take to the extreme, go down to the atomic level, basing its output on a simulation of the actual circuitry from a virtual power source, this would be a highly unusual solution. Emulators typically stop at a simulation of the documented hardware specifications and digital logic. Sufficient emulation of some hardware platform requires extreme accuracy, down to the level of individual clock cycles, undocumented features, unpredictable analog elements, and implementation bugs. This is particularly the case with classic home computers such as the *Commodore 64*, whose software often depends on highly sophisticated low-level programming tricks invented by game programmers and the "demoscene".
In contrast, some other platforms have had very little use of direct hardware addressing, such as an emulator for the *PlayStation 4*. In these cases, a simple compatibility layer may suffice. This translates system calls for the foreign system into system calls for the host system. I.E. The Linux compatibility layer used on *BSD* to run closed source Linux native software on *FreeBSD*, *NetBSD* and *OpenBSD*. For example, while the *Nintendo 64* graphics processor was fully programmable, most games used one of a few pre-made programs, which were mostly self-contained and communicated with the game via *FIFO*; therefor, many emulators do not emulate the graphics processsor at all, but simply interpret the commands recived from the CPU as the original program would. Developers of software for embedded systems or video game consoles often produced and tested before the final hardware exists in large quantities, so that it can be tested without taking the time to copy the program to be debugged at a low level and without introducing the side effects of a debugger. In many cases, the simulator is actually produced by the company providing the hardware, which theoretically increases its accuracy. Math co-processor emulators allow programs compiled with math instructions to run on machiones that don't have the co-processor installed, but the extra work done by the CPU may slow the system down. If a math coprocessor isn't installed or present on the CPU, when the CPU executes any co-processor instruction ir will make a determined interrupt, calling the math emulator routines. When the instruction is successfully emulated, the program continues executing.
*** Logic simulatores
Logic simulation is the use of a computer program to simulate the operation of a digital circuit such as a processor. This is done after a digital circuit has been designed in logic equations, but before the circuit is fabricated in hardware.
*** Functional Emulators
Functional esimulation is the use of a computer program to simulate the execution of a second computer program written in symbolc assembly language or compiler language, rather than in binary machine code. By using a functional simulator, programmers can execute and trace selected sections of source code to search for programming errors (bugs), without generating binary code. This is distinct from simulating execution of binary code, which is software emulation. The first functional simulator was written by *Autonetics* in 1960 for testing assembly language programs for later execution in military computer *D-17B*. This made it possible for flight programs to be written, executed, and tested before *D-17B* computer hardware had been built. Autonetics also programmed a functional simulator for testing flight programs for later execution in the military computer *D-37C*.
*** Video game console emulators
Video game console emulators are programs that allow a personal computer or video game console to emulate another video game console. They are most often used to play older 1980s to 2000s-era video games on modern personal computers and more contemporary video game consoles. They are also uysed to translate games into other languages, to modify existing games, and in the development process of "home brew" DIY demos and in the creation of new games for older systems. The internet has helped in the spread of console emulators, as most - if not all - would be unavailable for sale in retail outlets. Examples of console emulators that have been released in the last few decades are *RPCS3*, *Dolphin*, *Cemu*, *PCSX2*, *PPSSPP*, *ZSNES*, *Citra*, *ePSXe*, *Project64*, *mGBA*, *Visual Boy Advance* and *Yuzu*.
Due to their popularity, emulators have been impersonated by malware. Most of these emulators are for video game consoles like the *Xbox 460*, *Xbox One*, *Nintendo 3DS*, etc.
Generaly such emulators make currently impossible claims such as being able to run *Xbox One* and *Xbox 360* games in a single program.
*** Terminal Emulators
Terminal emulators are software programs that provide modern computers and devices interactive access to applications running on mainframe computer operating systems or other host systems such as *HP-UX* or *OpenVMS*. Terminals such as the *IBM 3270* or *VT100* and many others are no longer produced as physical devices. Instead, software running on modern ooperating systems simulates a "dumb" terminal and is able to render the graphical and text elements of the host application, send keystrokes and process commands using the appropriate terminal protocol.
*** Other Types
Other type of emulators:
- Hardware emulation: the process of imitating the behavior of one or more pieces of hardware with another piece of hardware, typically a special purpose emulation system
- In-circuit emulation: the use of a hardware device to debug the software of an embedded system
- Floating-point emulator: Some floating-point hardware only supports the simplest operations: addition, subtraction, and multiplication. In systems without any floating-point hardware, the CPU emulates it using a series of simpler fixed-point arithmetic operations that run on the integer arithmetic logic unit.
- Instruction set simulator: Mimics the behavior of a mainframe or microprocessor by "reading" instructions and maintaining internal variables wich represents the processor's registers.
- Network emulation: a technique for testing the performance of real applications over a virtual network. This is different from network simulation where virtual models of traffic, network models, channels, and protocols are applied.
- Server emulator: Multiplayer video games often rely on an online game server, which may or may not be available for on-premises installation. A server emulator is an unofficial on-premises server that imitates the behavior of the official online server, even though its internal working might be different.
- Semiulation: the process of controlling an emulation through a simulator.

* Structure and organization of Emulators.
Typically, an emulator is divided into modules that correspond roughly to the emulated computer's subsystems. Most often, an emulator will be composed of the following modules:
- a *CPU* emulator or *CPU* simulator, unless the target being emulated has the same *CPU* architecture as the host, in which case a *VM* layer may be used instead
- a memory subsystem module
- virtual I/O device emulators
- *GPU/PPU* emulators
  Buses are often not emulated, either for reasons of performance or simplicity, and virtual peripherals communicate directly with the *CPU* or the memory subsystem.

** Memory subsystem
It is possible for the memory subsystem emulation to be reduced to simply an array of elements each sized like an emulated word; however, this model fails very quickly as soon as any location in the computer's logical memory does not match physical memory. This clearly is the case whenever the emulated hardware allows for advanced memory management ( in which case, the *MMU* logic can be embedded in the memory emulator, made a module of its own, or sometimes integrated into the *CPU* simulator). Even if the emulated computer does not fear an *MMU*, though, there are usually other factors that break the equivalence between logical and physical memory: many architectures offer memmory-mapped I/O; even those that do not often have a block of logical memory mapped to *ROM*, which means that the memory-array module must be discarded if the read-only naturte of *ROM* is to be emulated. Features such as bank switching or segmentation may also complicate memory emulation. As a result, most emulators implement at least two procedures for writing to and reading from logical memory, and it is the procedures' duty to map every access to the correct location of the correct object.

On a base-limit addressing system where memory from address 0 to address _ROMSIZE-1_ is read-only memory, while the rest is *RAM*, something along the lines of the following procedures would be typical:
#+begin_src C
void WriteMemory(word addr, word val)
{
    word RealAddr = addr + BaseRegister;
    if ((RealAddr < LimitRegister) && (RealAddr > ROMSIZE))
        Memory[RealAddr] = val;
    else
        RaiseInterrupt(INT_SEGFAULT);
}

void ReadMemory(word addr)
{
    word RealAddr = addr + BaseRegister;
    if (RealAddr < LimitRegister)
        return Memory[RealAddr];
    else
        return NULL;
}
#+end_src
** CPU Simulator
The *CPU* simulator is often the most complicated part of an emulator. Many emulators are written using "pre-packaged" CPU simulators, in order to concentrate on good and efficient emulation of a specific machine. The simplest form of a CPU simulator is an interpreter, which is a computer program that follows the execution flow of the emulated program code and, for every machine code instruction encountered, executes operations on the host processor that are semantically equivalent to the original instructions. This is made possible by assigning a variable to each register and flag of the simulated CPU. The logic of the simulated CPU can then more or less be directly translated into software algorithms, create a software reimplementation that basically mirrors the original hardware implementation.
The following example illustrates how CPU simulation can be accomplished by an interpreter. In this case, interrupts are checked-for before every instruction executed, though this behavior is rare in real emulators for performance reasons (it is generally faster to use a subroutine to do the work of an interrupt).
#+begin_src C
void execute()
{
    if (interupt != INT_NONE) {
        SuperUser = TRUE;
        WriteMemory(++SP, PC);
        PC = InterruptPtr;
    }
    switch (ReadMemory(PC++)) {
        // Instruction handling goes here.
        default:
            Interrupt = INT_ILLEGAL;
    }
}
#+end_src
Interpreters are very popular as computer simulations, as they are much simpler to implement than more time-efficient alternative solutions, and their speed is more than adequate for emulating computers of more than roughly a decade ago on modern machines. However, the speed penalty inherent in intepretation can be a problem when emulating computers whose processor speed is on the same order of magnitude as the hoste machine. Until not many years ago, emulation in such situations was considered cimpletely impractical by many.
What allowed breaking through this restriction were the advances in dynamic recompilation techniques. Simple a _priori_ translation of emulated program code into code runnable on the host archictecture is usually impossible because of several reasons:
- code may be modified while in Ram, even if it is modified only by the emulated operating system when loading the code (for example from disk)
- there may not be a way to reliably distinguish data (which should not be translated) from executable code.
Various forms of dynamic recompilation, includeing the popular Just in Time compiler (JIT) technique, try to circumvent these problems by waiting until the processor control flow jumps into location containing untranslated code, and only then JIT translates a block of the code into host code that can be executed. The translated code is kept in a code cache, and the original code is not lost or affected; this way, even data segments can be (meaninglessly) translated by the recompiler, resulting in no more than a waste of translation time. Speed may not be desirable as some older games were not designed with the speed of faster computers in mind. A game designed for a 30MHz PC with a level timer of 300 game seconds might only give the player 30 seconds on a 300MHz PC. Other programs, such as some DOS programs, may not even run on faster computers. Particularly when emulating computers which were "closed-box", in which changes to the core of the system were not typical, software may use techniques that depend on specific charecteristics of the computer it ran on and thus precise control of the speed of emulation is important for such applications to be properly emulated.
** I/O
Most emulators do not, as mentioned earlier, emulate the main system bus; each I/O device is thus often treated as a special case, and no consistent interface for virtual peripherals is provided. This can result in a performance advantage, since each I/O module can be tailored to the charecteristics of the emulated device; designs based on a standard, unified I/O API can, however rival such simpler models, if well thoguht-out, and they have the additional advantage of "automatically" providing a plug-in service through which third-party virtual devices can be used within the emulator. A unified I/O API may not necessarily mirror the structure of the real hardware bus: bus designe is limited by several electric constraints and a need for hardware concurrency management that can mostly be ignored in a software implementation.
Even in emulators that treat each device as a special case, there is usually a common basic Infrastructure for:
- managing interrupts, by means of a proccedure that sets flags readable by the CPU simulator whenever an interrupt is raised, allowing the virtual CPU to "poll for (virtual) interrupts"
- wiriting to and reading from physical memory, by means of two procedures similar to the ones dealing with logical memory (although, contrary to the latter, the former can often be left out, and direct references to the memory array be employed instead)
* Applications
** In preservation
Emulation is one strategy in pursuit of digital preservation and combating obsolescence. Emulation focuses on recreating an original computer environment, which can be time-consuming and difficult to achieve, but valuable because of its ability to maintain a closer connection to the authenticity of the digital object, operating system, or even gaming platform. Emulation addresses the original hardware and software environment of the digital object, and recreates it on a current machine. The emulator allows the user to have access to any kind of application or operating system on a current platform, while the software runs as it did in its original environment. Jeffery Rothenberg, an early proponent of emulation as a digital preservation strategy states, "the ideal approach would provide a single extensible, long-term solution that can be designed once and for all and applied uniformly, automatically, and in organized synchrony (for example, at every refresh cycle) to all types of documents and media". He further states that this should not only apply to out of data systems, but also be upwardly mobile to future unknown systems. practically speaking, when a certain application is released in a new version, rather than address compatibility issues and migration for every digital object created in the previous version of that application, one could create an emulator for the application, allowing access to all of said digital objects.
*** Benefits
- Potentially better graphics quality than original hardware.
- Potentially additional features original hardware didn't have.
- Emulators maintain the original look, feel and behavior of the digital object, which is just as important as the digital data itself.
- Reduces labor hours, because rather than continuing an ongoing task of continual data migration for every digital object, once the library of past and present operating systems and application software is established in an emulator, these same technologies are used for every document using these platforms.
- Many emulators have already been developed and released under the *GNU General Public License* through the open source environment, allowing for wide scale collaboration.
- Emulators allow software exclusive to one system to be used on another. For example, a PlayStation 2 exclusive video game could be played on a PC using an emulator. This is especially useful when the original system is difficult to obtain and the analog-digital adapter can't be obtained or doesn't exits.
*** Obstacles
- The legality surrounding Intelectual property rights is an ongoing issue. many development teams, companies, and technology vendors alike somtimes implemented non-standard features during program development in order to establish their niche in the market, while simultaneously applying ongoing upgrades to remain competitive. While this may have advanced the technology industry and increased vendor's market share, it has left users lost in a preservation nightmare with little supporting documentation dute to the proprietary nature of the hardware and software.
- Copyright laws are not yet in effect to address saving the documentation and specification of proprietary software and hardware in an emulator module.
- Emulators are often used as a copyright infringement tool, since they allow users to play video games without having to buy the console, and rarely make any attempt to prevent the use of illegal copies. This leads to a number of legal uncertainties regarding emulation, and leads to software being programmed to refuse to work if it can tell the host is an emulator; some video games in particular will continue to run, but not allow the player to progress beyound some late stage in the game, often appearing to be faulty or just extremely difficult. These protections make it more difficult to design emulators, since they must be accurate enough to avoid triggering the procections, whose effects may not be obvious.
- Emulators require better hardware than the original system has.
** In new media Art
Because of its primary use of digital formats, new media art relies heavily on emulation as preservation strategy. Artists such as Cory Arcangel specialize in resurrecting obsolete technologies in their artwork and recognize the importance of a decentralized and deinstitutionalized process for the preservation of digital culture. In many cases, the goal of emulation in new media art is to preserve a digital medium so it can be saved indefinitely and reproduce without error, so that there is no reliance on hardware that ages and becomes obsolete. The paradox is that the emulation and the emulator have to be made to work on future computers.
** In future systems design
Emulation techniques are commonly used during the designe and development of new systems. It eases the development process by providing the ability to detect, recreate and repair flaws in the design even before the system is actually built it is particularly useful in the designe of multi-core systems, where concurrency errors can be very difficult to detect and correct without the controlled environment provided by virtual hardware. This also allows the software development to take place before the hardware is ready thus helping to validate design decisions and give a little more control.
* Comparison with simulation
The word "emulator" was coined in 1963 at IBM during development of the NPL (IBM System/360) product line, using a "new combination of software, microcode, and hardware". They discovered that simulation using additional instructions implemented in microcode and hardware, instead of software simulation using only standard instructions, to execute programs written for earlier IBM computers dramatically increased simulation speed. Earlier, IBM provided simulators for the 650 on the 705. in addition to simulators, IBM had compatibility features on the 709 and 7090, for which it provided the IBM 709 computer with a program to run legacvy programs written for the IBM 704 on the 709 and later on the IBM 7090. This program used the instructions added by the compatibility feature to trap instructions requiering special handling; all other 704 instructions ran the sam on a 7090. The compatibility feature on the 1410 only required setting console toggle switch, not a support program.
In 1963, when microcode was first used to speed up this simulation process, IBM engineers coined the term "emulator" to descrobe the concept. In the 2000s, it has become common to use the word "emulate" in the context of software. However, before 1980, "emulation" reffered only to emulation with hardware or microcode assist, while "simulation" reffered to pure software emulation. For example, a computer specially built for running programs designed for another architecture is an emulator. In contrast, a simulator could be a program which runs on a PC, so that old Atari games can be simulated on it. Purists continue to insist on this distinction, but currently the term "emulation" often means the complete imitation of a machine executing binary code while "simulation" often refers to computer simulation, where a computer program is used to simulate an abstract model. Computer simulation is used in virtually every scientific and engineering domain and Computer Science is no exception, with several projects simulating abstract models of computer systems, such as network simulation, which both practically and semantically differs from network emulation.
* Comparison with hardware virtualization
Hardware virtualization is the virtualization of computers as complete hardware platfroms, certain logical abstractions of their components, or only the functionality required to run various operating systems. Virtualization hides the physical charecteristics of a computing platform from the users, presenting instead an abstract computing platform. At its origins, the software that controlled virtualization was called a "control program", but the term "hypervisor" or "virtual machine monitor" became preffered over time. Eachg hypervisor can manage or run multiple virtual machines.
* Gameboy Emulation
** Specifications of DMG Gameboy
- *CPU*: Sharp SM83 LR35902 (4.19MHz)
- *RAM*: 8KB (also called Work RAM/WRAM)
- *MEMORY*:
  + *0x0000 - 0x3FFF* : ROM Bank 0
  + *0x4000 - 0x7FFF* : ROM Bank 1  - *Switchable*
  + *0x8000 - 0x97FF* : CHR RAM
  + *0x9800 - 0x9BFF* : BG Map 1
  + *0x9C00 - 0x9FFF* : BG Map 2
  + *0xA000 - 0xBFFF* : Cartridge RAM
  + *0xC000 - 0xCFFF* : RAM Bank 0
  + *0xD000 - 0xDFFF* : RAM Bank 1-7 - *switchable* - _Color only_
  + *0xE000 - 0xFDFF* : Reserved - Echo RAM
  + *0xFE00 - 0xFE9F* : Object Attribute Memory
  + *0xFEA0 - 0xFEFF* : Reserved - Unusable
  + *0xFF00 - 0xFF7F* : I/O Registers
  + *0xFF80 - 0xFFFE* : Zero Page
- *GFX*: PPU, LCD 160x144px 4 shades of gray.
*** Specs Table
TODO write specs table from https://gbdev.io/pandocs/Specifications.html

** Hardware access
The SM83 keeps an 8-bit data bus and a 16-bit address bus, so up to 64 KB of memory can be addressed. The memory map is composed of:
- Cartridge space.
- WRAM and Display RAM.
- I/O (Joypad, Audio, Graphics and LCD)
- Interrupt controls.
** Graphics
All graphics calculations are done by the CPU, then the Picture Processing Unit or *'PPU'* renders them. This is another component found inside the DMG-CPU and it's actually based on the Predecessor's PPU(SNES?).
The Picture is displayed on an integrated LCD screen, it has a resolution of 160x144px and shows 4 shades of black. But since the original Gameboy has a green LCD, graphics will look greenish.
*** Organising the Contents
The PPU has 8KB of VRAM or 'Display RAM', which both PPU and CPU can access directly but not at the same time. Those 8 KB will contain most of the data the PPU will need to render graphics. The remaining bits will be stored inside the PPU instead, as they will require a faster access rate.
The Game is in charge of populating the different areas with the correct type of data. Moreover, the PPU exposes registers so the game can instruct the PPU how the data is organised.
*** Constructing the frame
For demonstration purposes Super Mario Land 2 will be used as an example:
**** Tiles
#+CAPTION: Image of the Tiles from the Pattern Table.
#+NAME: fig:TilesPPU
#+ATTR_ORG: :width 200
[[./img/tiles.png]]
The PPU uses tiles as a basic ingredient for rendering graphics, specifically, sprites and backgrounds.
Tiles are just 8x8 bitmaps stored in VRAM, in a region called 'Tile set' or 'Tile pattern table', each pixel corresponds to one of the four shades of grey available. Finally, tiles are grouped into two pattern tables.
In order to build the picture, tiles are referenced in another type of table called a Tile map.
This information will tell the PPU where to render the tiles. Two maps are stored to construct different layers of the frame.
The next section explains how tile maps are used to construct the layers
**** Background
*TODO* Set up image
The Background layer is a 256x256 pixel (32x32 tiles) map containing static tiles. However, remember that only 160x144 is viwable on the screen, so the game decides which part is selected for display. Games can also move the viewable area druing gameplay, that's how the Scrolling Effect is accomplished.
One of the two tile maps can be used to build the background layer.
**** Window
*TODO* Add Image
The Window is a 160x144px layer containing tiles displayed on top of the background and sprites. It doesn't scroll.
The remaining tile map can be assigned to the window layer.
At first, this may sound like a silly feature. After all, the window layer overlaps everything else so what's it useful for? Well both Background and Window can be used concurrently at different parts of the screen. This is accomplished by changing the LCDCONT register during specific scan-lines.
Thus, games normaly use it to display player stats, score and other 'always-on' information.
**** Sprites
*TODO* add images.
Sprites are tiles that can move independently around the screen. They can also overlap each other and appear behind the background, the viewable graphic will be decided based on a priority attribute.
They also have an extra colour available:
Transparent. So, they can only display three different greys of four. Luckily, this layer allows defining two colour palettes to make use of every colour.
The Object Attribute Memory or 'OAM' is a map stored inside the PPU which specifies the tiles that will be used as sprites. Games fill this region by calling the DMA unit found inside the chip, the DMA fetches data from main RAM or game ROM to OAM.
Apart from the tile index, each entry contains the following attrigutes: X-Y position, colour pallete, priority and flip flags.
The PPU is limited to rendering up to ten sprites per scan-line and up to 40 per frame, overflowing this will result in sprites not being drawn.
**** Result
Once the frame is finished, it's time to move on to the next one! However, the CPU can't modify the tables while the PPU is reading from VRAM, so the system provides a set of interrupts triggered when the PPU is idle. You can recall this behaviour from the times of the NES.
When a single scan-line is complete, the Horizontal Blank interrupt is called. This allows to fiddle with the part of the frame that has not yet been drawn.
When all scan-lines are complete, the Vertical Blank interrupt is called. The game can now update the graphics for the next frame.
There's an extra state called OAM search that is triggered at the start of the scan-line, at this point the PPU is processing which sprites will be displayed in the scan-line, so the game can update any region except OAM.

*** Secrets and Limitations
The inclusion of the Window layer and extra interrupts allowed for new types of content and effects.
**** Wobble effect
*TODO* Finnish writing.
** AUDIO
The audio system is carried out by the Audio Processing Unit (APU), a PSG chip with four channels.
*** Functionality
Each channel is reserved for a type of wave-form:
**** Pulse
*TODO* write this
**** Noise
*TODO* write this
**** Wave
*TODO* write this
*** Secrets and limitations
The mixer outputs stereo sound, so the channels can be assigned to the left side or on the right one, this is only possible to hear from the headphones though! The speaker is mono.
Furthermore, the mixer chip is also connected to a dedicated pin on the cartridge, allowing to stream an extra channel with the condition that the cartridge has to actually output the analogue sound (only possible with extra hardware). No game in the market ended up using this feature.
** Games
Games are written in assembly and they have a maximum size of 32 KB, this is due to the limited address space available. However, with the use of Memory Bank Controller (mapper), games can reach bigger sizes.
The biggest cartridge found in the market has a 1MB ROM.
Cartridges can include a real-time clock and an external batter along with SRAM to hold saves.
*** External communications
For the first time, games can communicate with other consoles with the use of a Game Boy Link cable, which provides multiplayer functionality. The interface uses a very primitive type of serial connection.
** Anti-piracy
This console contains a 256 Byte ROM stacked in the CPU that is used to bootstrap the cartridge's ROM. It doesn't run the game right away however, it first executes a series of checks that prevent the execution of unauthorised cartridges and also makes sure the cartride is correctly inserted.

To be able to pass these checks, games had to include a copy of Nintendo's logo (in the form of titles) in its ROM header, this way Nintendo could make use of Copyright and Trademark laws to control the distribution, _Clever huh_? The Gameboy ROM also embeds a copy of the logo to be able to compare it.

That being said, the boot process is as follows:
 + After the console is switched on, the CPU starts reading at address *0x00* (Gameboy's ROM location).
 + RAM and Sound are initialised.
 + Nintendo logo is copied from the cartridge ROM to Display RAM, then it's drawn at the top edge of the screen. If there is no cartridge inserted, the logo will contain garbage tiles. The same may happen if it's badly inserted.
 + The logo is scrolled down and the famous /po-ling/ sound is played.
 + The game's Nintendo logo is matched against the one stored in the console's ROM, if the check fails the console freezes.
 + A quick checksum is done on the cartridge's ROM header to make sure the cartridge is correctly insterted, if the check fails the console freezes.
 + The console's ROM is removed from the memory map.
 + CPU starts executing the game.

Interestingly enough the /Nintendo/ logo diplayed on the screen is not cleared from VRAM, so games can apply some animation and effects to introduce their own logo.

More anti-piracy measures can be implemented inside games, like checking the SRAM size (it's normally bigger in Bootlegs) and checksumming the ROM at random points of the game.

*** header checksum
#+begin_src
x = 0
i = $0134
while i <= $014C
    x = x - [i] - 1
#+end_src
* Thoughts on the whole work Diary.
** Little issues.
Working on Mac OS seams that Clang is a bit picky with functions and causes issues when compiling and screams about duplicate subroutines. Might need to test this on gcc if that also has issues. Altho i imaigne it might be fine. But will check tomorow.
Other than that Everything seams to be working and should compile just the issues with well Linker on clang.
** Practicum thoughts.
The whole practicum thing is a bit mental to me. TODO need to make a presentation and a 13page paper on what the whole thing is. While usually it's nothing hard I'll have to check if I can figure some more shit out. As if i have to do everything right now it's a bit of an issue to make it to Sunday. Since I have to finnnish and get everything to compile and then also figure out an easy way to write the paper and a presentation of 7 minutes with hopefully a demo of everything compiling and explaining well a bit about what i did and didnt do and what were the issues about the whole thing. So as it stands right now I'm in a bit of a pickle. But I imagine it's not as bad as it might seem.
I'll try and email the school tomorow about if i can extend the deadly because it seams a bit unfair to have 14th and 15th may be the deadline and then also 24th may. which everyone applied for so all the places are taken up. So it's a tad bit cringe. But oh well We'll see if i can extend the whole thing since I do need a bit more time and things to do. But for Now it seams to be fine. Hopefully i don't have to get ready for 15th. Which would mean probably 2 all nighters aswell as trying to help a friend with their stats Exam.
Ohh boy. I'm in Mental HELL at the moment. :^)
